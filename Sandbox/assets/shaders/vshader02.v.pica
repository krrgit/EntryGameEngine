; Texture + Color Shader

; Uniforms
.fvec u_ViewProjection[4], u_Transform[4], u_Color[4]

; Constants
.constf myconst(0.0, 1.0, -1.0, 0.1)
.alias  zeros myconst.xxxx ; Vector full of zeros
.alias  ones  myconst.yyyy ; Vector full of ones

; Outputs
.out outpos position
.out outtc0 texcoord0
.out outclr color

; Inputs (defined as aliases for convenience)
.alias inpos v0
.alias intex v1

.proc main
	; Force the w component of inpos to be 1.0
	mov r0.xyz, inpos
	mov r0.w,   ones

	; r1 = Transform * inpos
	dp4 r1.x, u_Transform[0], r0
	dp4 r1.y, u_Transform[1], r0
	dp4 r1.z, u_Transform[2], r0
	dp4 r1.w, u_Transform[3], r0

	; outpos = ViewProjection * r1
	dp4 outpos.x, u_ViewProjection[0], r1
	dp4 outpos.y, u_ViewProjection[1], r1
	dp4 outpos.z, u_ViewProjection[2], r1
	dp4 outpos.w, u_ViewProjection[3], r1

	; outtex = intex
	mov outtc0, intex

	; outcolor = intex coord
	; mov outclr.xy, intex
	; mov outclr.z, zeros
	; mov outclr.w, ones

	; outcolor = white
	mov outclr, u_Color


	; We're finished
	end
.end
